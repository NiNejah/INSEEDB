Dans un premier temps, il faut modéliser et construire la base de données des régions, 
départements et villes françaises. La base de données devra être en 3FN et gérer les régions, 
départements et villes françaises. Il s'agira d'utiliser au maximum les données des fichiers. 
Les régions et département ont chacun une commune chef-lieu. Les villes sont dans des départements qui sont eux-mêmes dans des régions. 
 
- Dessin du fichier « Communes existantes » et liste des variables:
Nom de la variable 	 | Longueur de la variable 	| Désignation et modalités de la variable
TYPECOM |  	4 |  	Type de commune
COM |  	5 |  	Code commune
REG |  	2 |  	Code région
DEP |  	3 |  	Code département
CTCD |  	4 |  	Code de la collectivité territoriale ayant les compétences départementales
ARR |  	4 |  	Code arrondissement
TNCC |  	1 |  	Type de nom en clair
NCC |  	200 |  	Nom en clair (majuscules)
NCCENR |  	200 |  	Nom en clair (typographie riche)
LIBELLE |  	200 |  	Nom en clair (typographie riche) avec article
CAN |  	5 |  	Code canton. Pour les communes « multi-cantonales », code décliné de 99 à 90 (pseudo-canton) ou de 89 à 80 (communes nouvelles)
COMPARENT |  	5 |  	Code de la commune parente pour les arrondissements municipaux et les communes associées ou déléguées.


– Dessin du fichier « Départements » et liste des variables 
Nom de la variable |	Longueur de la variable |	Désignation et modalités de la variable
DEP |  	3 | 	Code département
REG |  	2 | 	Code région
CHEFLIEU |  	5 | 	Code de la commune chef-lieu
TNCC |  	1 | 	Type de nom en clair
NCC |  	200 | 	Nom en clair (majuscules)
NCCENR |  	200 | 	Nom en clair (typographie riche)
LIBELLE |  	200 | 	Nom en clair (typographie riche) avec article


 – Dessin du fichier « Régions » et liste des variables
REG |  	2 |  	Code région
CHEFLIEU |  	5 |  	Code de la commune chef-lieu
TNCC |  	1 |  	Type de nom en clair
NCC |  	200 |  	Nom en clair (majuscules)
NCCENR |  	200 |  	Nom en clair (typographie riche)
LIBELLE |  	200 |  	Nom en clair (typographie riche) avec article


# cat rep : 

Voici une proposition de modèle de données relationnelles pour cette base de données :

Table Région

    IdRegion (clé primaire) : identifiant unique de la région
    NomRegion : nom de la région
    IdCommuneChefLieu : identifiant unique de la commune chef-lieu

Table Departement

    IdDepartement (clé primaire) : identifiant unique du département
    NomDepartement : nom du département
    IdRegion (clé étrangère) : identifiant unique de la région à laquelle appartient le département
    IdCommuneChefLieu (clé étrangère) : identifiant unique de la commune chef-lieu du département

Table Commune

    IdCommune (clé primaire) : identifiant unique de la commune
    NomCommune : nom de la commune
    IdDepartement (clé étrangère) : identifiant unique du département auquel appartient la commune

Nous pouvons utiliser les variables des fichiers de l'INSEE pour remplir ces tables et définir les clés primaires et étrangères. Par exemple, 
le code commune (variable COM) sera utilisé pour identifier chaque commune de manière unique dans la table Commune, 
le code département (variable DEP) sera utilisé pour identifier chaque département dans la table Departement, 
et le code région (variable REG) sera utilisé pour identifier chaque région dans la table Région.








I have this psql tables :

create table Region (
    IdRegion INT PRIMARY KEY,
    NameRegion VARCHAR(35) CONSTRAINT region_name_null NOT NULL
);

create table Departement (
    IdDepartement INT PRIMARY KEY,
    NameDepartement VARCHAR(35) CONSTRAINT departement_name_null NOT NULL,
    IdRegion INT references Region(IdRegion) NOT NULL
);

create table Commune (
    IdCommune INT SERIAL PRIMARY KEY ,
    CodeCommune CHAR(5) PRIMARY KEY,
    NameCommune VARCHAR(35) CONSTRAINT commune_name_null NOT NULL,
    IdDepartement INT references Departement(IdDepartement)
);

create table DeptChefLieu (
    IdCommune INT references Commune(IdCommune) ,
    IdDepartement INT references Departement(IdDepartement) ,
    PRIMARY KEY (IdCommune,IdDepartement)
);

create table RegionChefLieu (
    IdCommune INT references Commune(IdCommune) ,
    IdRegion INT references Region(IdRegion) ,
    PRIMARY KEY (IdCommune,IdRegion)
);

i want to creat a new table ( Statistic ) :
* has ( IdCommune INT references Commune(IdCommune)) 
* has severelle indicateurs (lable) :
    + Population in (2019 , 2013 , 2008 ) 
    + Population categorize (Pop 0-14 years 2019 , Pop 15-29 years 2019, Pop 75-89 years in 2013,Pop male 0-14 years 2013 ,Pop female 60-74 years 2013, ...)
    + Births between two years (1982-1990 , 1968-1975,...)
* statValue (int)
It must be taken into account that this database will be enriched in the future with new indicators




I want to creat a python function addColumn(csvFile,headers,intoIndex,values,sep):
how get a csvFile and add Columns to it in intoIndex,and fill it with values,
example:
myfile.csv 
"
col1,col2,col3
12,32,fkjgg
23,45,fdgfdg
31,24,sdfzr
"
calling addColumn(myfile,['newC1','newC2'],[1,3],['pop','10'])
will change myFile to : 
"
col1,newC1,col2,newC2,col3
12,pop,32,10,fkjgg
23,pop,45,10,fdgfdg
31,pop,24,10,sdfzr
"



ther is a bug with your function:
using this file :
myfile.csv 
"
col1,col2,col3
12,32,fkjgg
23,45,fdgfdg
31,24,sdfzr
"
// the result file is :
"
col1,newC1,pop,col2,newC2,10,col3
12,pop,32,10,fkjgg
23,pop,45,10,fdgfdg
31,pop,24,10,sdfzr
"


